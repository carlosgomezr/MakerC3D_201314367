
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 15 17:14:01 CST 2017
//----------------------------------------------------

package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 15 17:14:01 CST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\006\002\000\002\002" +
    "\004\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\004\000" +
    "\002\003\005\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\003\000\002\007\002\000\002\005\006\000" +
    "\002\010\002\000\002\005\006\000\002\005\004\000\002" +
    "\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\016\004\000\005\000\006\000\010\000\014" +
    "\000\026\000\001\002\000\016\004\015\005\013\006\010" +
    "\010\011\014\012\026\017\001\002\000\004\002\006\001" +
    "\002\000\004\002\001\001\002\000\010\002\uffe8\024\uffe8" +
    "\025\uffe8\001\002\000\040\002\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\001\002\000" +
    "\014\004\015\005\013\006\010\010\011\014\012\001\002" +
    "\000\014\004\015\005\013\006\010\010\011\014\012\001" +
    "\002\000\040\002\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\001\002\000\036\002\uffee" +
    "\007\034\010\030\011\033\012\036\013\032\016\037\017" +
    "\035\020\031\021\027\022\040\023\041\024\uffee\025\uffee" +
    "\001\002\000\040\002\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\023\ufff7\024\ufff7\025\ufff7\001\002\000\010\002" +
    "\uffff\024\021\025\022\001\002\000\016\004\015\005\013" +
    "\006\010\010\011\014\012\026\017\001\002\000\010\002" +
    "\uffe9\024\021\025\022\001\002\000\016\004\uffed\005\uffed" +
    "\006\uffed\010\uffed\014\uffed\026\uffed\001\002\000\016\004" +
    "\uffeb\005\uffeb\006\uffeb\010\uffeb\014\uffeb\026\uffeb\001\002" +
    "\000\016\004\015\005\013\006\010\010\011\014\012\026" +
    "\017\001\002\000\010\002\uffea\024\021\025\uffea\001\002" +
    "\000\016\004\015\005\013\006\010\010\011\014\012\026" +
    "\017\001\002\000\010\002\uffec\024\uffec\025\uffec\001\002" +
    "\000\014\004\015\005\013\006\010\010\011\014\012\001" +
    "\002\000\014\004\015\005\013\006\010\010\011\014\012" +
    "\001\002\000\014\004\015\005\013\006\010\010\011\014" +
    "\012\001\002\000\014\004\015\005\013\006\010\010\011" +
    "\014\012\001\002\000\014\004\015\005\013\006\010\010" +
    "\011\014\012\001\002\000\014\004\015\005\013\006\010" +
    "\010\011\014\012\001\002\000\014\004\015\005\013\006" +
    "\010\010\011\014\012\001\002\000\014\004\015\005\013" +
    "\006\010\010\011\014\012\001\002\000\014\004\015\005" +
    "\013\006\010\010\011\014\012\001\002\000\014\004\015" +
    "\005\013\006\010\010\011\014\012\001\002\000\014\004" +
    "\015\005\013\006\010\010\011\014\012\001\002\000\022" +
    "\002\uffef\007\034\010\030\011\033\012\036\013\032\024" +
    "\uffef\025\uffef\001\002\000\022\002\ufff0\007\034\010\030" +
    "\011\033\012\036\013\032\024\ufff0\025\ufff0\001\002\000" +
    "\022\002\ufff4\007\034\010\030\011\033\012\036\013\032" +
    "\024\ufff4\025\ufff4\001\002\000\040\002\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\032\015\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\001" +
    "\002\000\022\002\ufff3\007\034\010\030\011\033\012\036" +
    "\013\032\024\ufff3\025\ufff3\001\002\000\040\002\ufffe\007" +
    "\ufffe\010\ufffe\011\033\012\036\013\032\015\ufffe\016\ufffe" +
    "\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025" +
    "\ufffe\001\002\000\040\002\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\013\032\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021" +
    "\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\001\002\000\040" +
    "\002\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\032\015" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\001\002\000\022\002\ufff2\007\034\010" +
    "\030\011\033\012\036\013\032\024\ufff2\025\ufff2\001\002" +
    "\000\040\002\ufffd\007\ufffd\010\ufffd\011\033\012\036\013" +
    "\032\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\001\002\000\022\002\ufff1\007" +
    "\034\010\030\011\033\012\036\013\032\024\ufff1\025\ufff1" +
    "\001\002\000\016\007\034\010\030\011\033\012\036\013" +
    "\032\015\056\001\002\000\040\002\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\001\002" +
    "\000\040\002\ufff9\007\ufff9\010\ufff9\011\033\012\036\013" +
    "\032\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9" +
    "\023\ufff9\024\ufff9\025\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\055\000\006\002\004\006\003\001\001\000\010\003" +
    "\013\004\006\005\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\056\001\001\000\004\003\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\013\004\006\005\017\001\001\000\002\001\001" +
    "\000\004\007\024\001\001\000\004\010\022\001\001\000" +
    "\010\003\013\004\006\005\023\001\001\000\002\001\001" +
    "\000\010\003\013\004\006\005\025\001\001\000\002\001" +
    "\001\000\004\003\053\001\001\000\004\003\052\001\001" +
    "\000\004\003\051\001\001\000\004\003\050\001\001\000" +
    "\004\003\047\001\001\000\004\003\046\001\001\000\004" +
    "\003\045\001\001\000\004\003\044\001\001\000\004\003" +
    "\043\001\001\000\004\003\042\001\001\000\004\003\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

//Codigo de acciones
      

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cond ::= r 
            {
              NodoC3D RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          RESULT = new NodoC3D(der.ETQV, der.ETQF);  
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cond ::= NOT cond 
            {
              NodoC3D RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D exp1 = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        String LV = exp1.getFalsa();
                        String LF = exp1.getVerdadera();
                        RESULT = new NodoC3D(LV, LF);                        
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cond ::= cond OR NT$2 cond 
            {
              NodoC3D RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (NodoC3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int izq1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int izq1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoC3D izq1 = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int der1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int der1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der1 = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String LV = izq1.getVerdadera() + "," + der1.getVerdadera();
                        String LF = der1.getFalsa();
                        RESULT = new NodoC3D(LV, LF); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              NodoC3D RESULT =null;
		int izq1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int izq1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoC3D izq1 = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 String c3d = izq1.ETQF + " : "+"\n";   ControlC3D.agregarC3D(c3d);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cond ::= cond AND NT$1 cond 
            {
              NodoC3D RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (NodoC3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int izq1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int izq1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoC3D izq1 = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int der1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int der1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der1 = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String LV = der1.getVerdadera();
                        String LF = izq1.getFalsa() + "," + der1.getFalsa();
                        RESULT = new NodoC3D(LV, LF); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$1 ::= 
            {
              NodoC3D RESULT =null;
		int izq1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int izq1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoC3D izq1 = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 String c3d = izq1.ETQV + " : "+"\n";   ControlC3D.agregarC3D(c3d); 
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // r ::= expresion 
            {
              NodoC3D RESULT =null;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            RESULT = new NodoC3D(der.getCad());
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // r ::= expresion DIFERENTE expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String tempv = ControlC3D.generaTemp();
                            String tempf = ControlC3D.generaTemp();
                            String c3d = "if "+izq.getCad() + ">" + der.getCad() + " then goto "+tempv+"\n";
                            c3d = c3d + " goto "+tempf+"\n";    
                            String temp = ControlC3D.generaTemp();
                            //String c3d = temp + " = " + izq.getCad() + " != " + der.getCad() + ";\n";
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(tempv, tempf);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // r ::= expresion IGUAL expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String tempv = ControlC3D.generaTemp();
                            String tempf = ControlC3D.generaTemp();
                            String c3d = "if "+izq.getCad() + "==" + der.getCad() + " then goto "+tempv+"\n";
                            c3d = c3d + " goto "+tempf+"\n";    
                            String temp = ControlC3D.generaTemp();
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(tempv, tempf);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // r ::= expresion MENORIGUAL expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String tempv = ControlC3D.generaTemp();
                            String tempf = ControlC3D.generaTemp();
                            String c3d = "if "+izq.getCad() + "<=" + der.getCad() + " then goto "+tempv+"\n";
                            c3d = c3d + " goto "+tempf+"\n";    
                            String temp = ControlC3D.generaTemp();
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(tempv, tempf);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // r ::= expresion MENOR expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String tempv = ControlC3D.generaTemp();
                            String tempf = ControlC3D.generaTemp();
                            String c3d = "if "+izq.getCad() + "<" + der.getCad() + " then goto "+tempv+"\n";
                            c3d = c3d + " goto "+tempf+"\n";    
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(tempv, tempf);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // r ::= expresion MAYORIGUAL expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            String tempv = ControlC3D.generaTemp();
                            String tempf = ControlC3D.generaTemp();
                            String c3d = "if "+izq.getCad() + ">=" + der.getCad() + " then goto "+tempv+"\n";
                            c3d = c3d + " goto "+tempf+"\n";    
                            String temp = ControlC3D.generaTemp();
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(tempv, tempf);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // r ::= expresion MAYOR expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String tempv = ControlC3D.generaTemp();
                        String tempf = ControlC3D.generaTemp();
                        String c3d = "if "+izq.getCad() + ">" + der.getCad() + " then goto "+tempv+"\n";
                        c3d = c3d + " goto "+tempf+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(tempv, tempf);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= DECIMAL 
            {
              NodoC3D RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String decimal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoC3D(decimal); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expresion ::= ENTERO 
            {
              NodoC3D RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoC3D(entero); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expresion ::= ID 
            {
              NodoC3D RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NodoC3D(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresion ::= PAR_IZQ expresion PAR_DER 
            {
              NodoC3D RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoC3D exp = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresion ::= MENOS expresion 
            {
              NodoC3D RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D exp = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresion ::= expresion POT expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresion ::= expresion DIV expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresion ::= expresion MULT expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expresion ::= expresion MENOS expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expresion ::= expresion MAS expresion 
            {
              NodoC3D RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoC3D izq = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D der = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicial ::= NT$0 cond 
            {
              NodoC3D RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoC3D) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoC3D exp = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = exp;
                    if(exp!=null){
                            ControlC3D.agregarC3D("\n//Etiquetas Verdaderas: " + exp.ETQV+"\n");
                            ControlC3D.agregarC3D("\n//Etiquetas falsas: " + exp.ETQF+"\n");

                        }
                    else{
                            ControlC3D.agregarC3D("//Último valor: " + exp.getCad());
                        }                    
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicial",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              NodoC3D RESULT =null;
 ControlC3D.reiniciar(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoC3D start_val = (NodoC3D)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

