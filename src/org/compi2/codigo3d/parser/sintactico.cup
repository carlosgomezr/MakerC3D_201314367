package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
terminal MAYOR, MAYORIGUAL, MENOR, MENORIGUAL, IGUAL, DIFERENTE; //relacional
terminal AND, OR, NOT; //logica


nonterminal NodoC3D inicial, expresion,r,cond;


//LOGICO
precedence left OR;
precedence left AND; 


//ARITMETICA
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 



start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} cond:exp 
                    {: 
                        RESULT = exp;
                    if(exp!=null){
                            ControlC3D.agregarC3D("\n//Etiquetas Verdaderas: " + exp.ETQV+"\n");
                            ControlC3D.agregarC3D("\n//Etiquetas falsas: " + exp.ETQF+"\n");

                        }
                    else{
                            ControlC3D.agregarC3D("//Ãšltimo valor: " + exp.getCad());
                        }                    
                    :};

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ expresion:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;
			
			
r   ::= expresion:izq MAYOR expresion:der
                    {: 
                        String tempv = ControlC3D.generaTemp();
                        String tempf = ControlC3D.generaTemp();
                        String c3d = "if "+izq.getCad() + ">" + der.getCad() + " then goto "+tempv+"\n";
                        c3d = c3d + " goto "+tempf+"\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(tempv, tempf);
                    :}
            |   expresion:izq MAYORIGUAL expresion:der
                    {:
                            String tempv = ControlC3D.generaTemp();
                            String tempf = ControlC3D.generaTemp();
                            String c3d = "if "+izq.getCad() + ">=" + der.getCad() + " then goto "+tempv+"\n";
                            c3d = c3d + " goto "+tempf+"\n";    
                            String temp = ControlC3D.generaTemp();
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(tempv, tempf);
                    :}
            |   expresion:izq MENOR expresion:der
                    {:
                            String tempv = ControlC3D.generaTemp();
                            String tempf = ControlC3D.generaTemp();
                            String c3d = "if "+izq.getCad() + "<" + der.getCad() + " then goto "+tempv+"\n";
                            c3d = c3d + " goto "+tempf+"\n";    
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(tempv, tempf);
                    :}
            |   expresion:izq MENORIGUAL expresion:der
                    {:
                            String tempv = ControlC3D.generaTemp();
                            String tempf = ControlC3D.generaTemp();
                            String c3d = "if "+izq.getCad() + "<=" + der.getCad() + " then goto "+tempv+"\n";
                            c3d = c3d + " goto "+tempf+"\n";    
                            String temp = ControlC3D.generaTemp();
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(tempv, tempf);
                    :}
            |   expresion:izq IGUAL expresion:der
                    {:
                            String tempv = ControlC3D.generaTemp();
                            String tempf = ControlC3D.generaTemp();
                            String c3d = "if "+izq.getCad() + "==" + der.getCad() + " then goto "+tempv+"\n";
                            c3d = c3d + " goto "+tempf+"\n";    
                            String temp = ControlC3D.generaTemp();
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(tempv, tempf);
                    :}
            |   expresion:izq DIFERENTE expresion:der
                    {:
                            String tempv = ControlC3D.generaTemp();
                            String tempf = ControlC3D.generaTemp();
                            String c3d = "if "+izq.getCad() + ">" + der.getCad() + " then goto "+tempv+"\n";
                            c3d = c3d + " goto "+tempf+"\n";    
                            String temp = ControlC3D.generaTemp();
                            //String c3d = temp + " = " + izq.getCad() + " != " + der.getCad() + ";\n";
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(tempv, tempf);
                    :}		
            | expresion:der 
                    {:
                            RESULT = new NodoC3D(der.getCad());
                    :}	
            ;
			


cond			::= cond:izq1 AND {: String c3d = izq1.ETQV + " : "+"\n";   ControlC3D.agregarC3D(c3d); 
                      :}
                        cond:der1
                    {: 
                        String LV = der1.getVerdadera();
                        String LF = izq1.getFalsa() + "," + der1.getFalsa();
                        RESULT = new NodoC3D(LV, LF); 
                    :}
            |   cond:izq1 OR {: String c3d = izq1.ETQF + " : "+"\n";   ControlC3D.agregarC3D(c3d);
                      :}
                    cond:der1
                    {: 
                        String LV = izq1.getVerdadera() + "," + der1.getVerdadera();
                        String LF = der1.getFalsa();
                        RESULT = new NodoC3D(LV, LF); 
                    :}
            |   NOT cond:exp1 
                    {:
                        String LV = exp1.getFalsa();
                        String LF = exp1.getVerdadera();
                        RESULT = new NodoC3D(LV, LF);                        
                    :}	

            | r:der 
                    {:
                          RESULT = new NodoC3D(der.ETQV, der.ETQF);  
                    :}			
            ;